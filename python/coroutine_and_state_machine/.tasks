# vim: set fenc=utf-8 ft=dosini:
# see: https://github.com/skywind3000/asynctasks.vim/wiki/Task-Config

# define a new task named "file-build"
[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=g++ "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
# if use c++ 20
; command=clang++ "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)   -std=c++20"

command:rust="cargo check"
; command:rust=rustc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1


[file-run]
command="$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=pp "$(VIM_FILENAME)"
; command:python=python "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:rust="cargo run"
# output mode: run in a terminal
cwd=$(VIM_FILEDIR)
output=terminal

[file-buildrun]
command:rust=rustc "$(VIM_FILEPATH)"; and ./$(VIM_FILENOEXT)
